swagger: '2.0'
info:
  version: '2016-09-29T19:30:02Z'
  title: testFirstAPI_Q1
host: o7str3n8id.execute-api.us-east-1.amazonaws.com
basePath: /dev
schemes:
  - https
paths:
  /customer:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: customerPostTest1
          required: true
          schema:
            $ref: '#/definitions/customerPostTest1'
      responses:
        '201':
          description: 201 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '400':
          description: 400 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '403':
          description: 403 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.cause.errorMessage')
                }
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          400.*:
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "tableName" : "Customer",
                "operation" : "create",
                "item" : $input.json('$')
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/customer/{email}':
    get:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '404':
          description: 404 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          404.*:
            statusCode: '404'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "operation":"read",
                "tableName":"Customer",
                "email":"$input.params('email')"
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          required: true
          type: string
        - in: body
          name: customerPutTest1
          required: true
          schema:
            $ref: '#/definitions/customerPutTest1'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '400':
          description: 400 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '404':
          description: 404 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          400.*:
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                { 
                    "Error Message":$input.json('$.errorMessage'),
                    "Error Type":$input.json('$.errorType')
                }
          404.*:
            statusCode: '404'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                { 
                    "Error Message":$input.json('$.errorMessage'),
                    "Error Type":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "operation":"update",
                "tableName":"Customer",
                "email":"$input.params('email')",
                "updates":$input.json('$')
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                $input.jsom('$.Item')
        requestTemplates:
          application/json: |-
            {
                "operation":"delete",
                "tableName":"Customer",
                "email":"$input.params('email')"
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    options:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,OPTIONS,PUT'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /address:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: addressPOST
          required: true
          schema:
            $ref: '#/definitions/addressPOST'
      responses:
        '201':
          description: 201 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '400':
          description: 400 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '403':
          description: 403 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: '403'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.cause.errorMessage')
                }
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          400.*:
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "tableName" : "Address",
                "operation" : "create",
                "item" : $input.json('$')
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/address/{UUID}':
    get:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '404':
          description: 404 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          404.*:
            statusCode: '404'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                {
                    "Error Message":$input.json('$.errorMessage'),
                    "Details":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "operation":"read",
                "tableName":"Address",
                "email":"$input.params('email')"
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          required: true
          type: string
        - in: body
          name: addressPUT
          required: true
          schema:
            $ref: '#/definitions/addressPUT'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '400':
          description: 400 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
        '404':
          description: 404 response
          schema:
            $ref: '#/definitions/Error'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                $input.json('$.Item')
          400.*:
            statusCode: '400'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                { 
                    "Error Message":$input.json('$.errorMessage'),
                    "Error Type":$input.json('$.errorType')
                }
          404.*:
            statusCode: '404'
            responseTemplates:
              application/json: |-
                #set($inputRoot=$input.path('$'))
                { 
                    "Error Message":$input.json('$.errorMessage'),
                    "Error Type":$input.json('$.errorType')
                }
        requestTemplates:
          application/json: |-
            {
                "operation":"update",
                "tableName":"Address",
                "UUID":"$input.params('UUID')",
                "updates":$input.json('$')
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                $input.jsom('$.Item')
        requestTemplates:
          application/json: |-
            {
                "operation":"delete",
                "tableName":"Address",
                "email":"$input.params('email')"
            }
        uri: >-
          arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
    options:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,OPTIONS,PUT'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
definitions:
  customerPostTest1:
    type: object
    required:
      - email
      - lastname
      - firstname
      - address_ref
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      address_ref:
        type: string
  Empty:
    type: object
    title: Empty Schema
  Error:
    type: object
    properties:
      message:
        type: string
    title: Error Schema
  customerPutTest1:
    type: object
    required:
      - email
    properties:
      firstname:
        type: string
      lastname:
        type: string
      address_ref:
        type: string
      phone_num:
        type: string
      email:
        type: string
  addressPOST:
    type: object
    required:
      - city
      - street
      - number
      - zipcode
    properties:
      city:
        type: string
      street:
        type: string
      number:
        type: string
      zipcode:
        type: string
  addressPUT:
    required:
      - UUID
    properties:
      UUID:
        type: string
      city:
        type: string
      street:
        type: string
      number:
        type: string
      zipcode:
        type: string
    
      
  
