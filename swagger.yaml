---
swagger: "2.0"
info:
  version: "2016-10-13T19:01:43Z"
  title: "serverlessAPPAPI"
host: "i1zu432nj9.execute-api.us-east-1.amazonaws.com"
basePath: "/dev"
schemes:
- "https"
paths:
  /address:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "addressPOST"
        required: true
        schema:
          $ref: "#/definitions/addressPOST"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/addressPOSTReturn"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.cause.errorMessage')\n\
                }"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "\n#set($allParams = $input.params())\n{\n    \"UUID\"\
                \ : $input.json('$.UUID')\n\n}\n"
          400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"tableName\" : \"Address\",\n    \"operation\"\
            \ : \"create\",\n    \"item\" : $input.json('$')\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /address/{UUID}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/addressGetReturn"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"UUID\"\
                : $input.json('$.Item.UUID'),\n    \"street\": $input.json('$.Item.street'),\n\
                \    \"number\": $input.json('$.Item.number'),\n    \"city\": $input.json('$.Item.city'),\n\
                \    \"state\": $input.json('$.Item.state'),\n    \"zipcode\": $input.json('$.Item.zipcode')\n\
                }"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"read\",\n    \"tableName\":\"\
            Address\",\n    \"UUID\":\"$input.params('UUID')\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "addressPUT"
        required: true
        schema:
          $ref: "#/definitions/addressPUT"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/addressPUTReturn"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($allParams = $input.params())\n{\n    \"UUID\"\
                \ : $input.json('$.UUID')\n}\n"
          400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"update\",\n    \"tableName\":\"\
            Address\",\n    \"UUID\":\"$input.params('UUID')\",\n    \"item\":$input.json('$')\n\
            }"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n$input.jsom('$.Item')\n"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"delete\",\n    \"tableName\":\"\
            Address\",\n    \"UUID\":\"$input.params('UUID')\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Address/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customer:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "customerPostTest1"
        required: true
        schema:
          $ref: "#/definitions/customerPostTest1"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.cause.errorMessage')\n\
                }"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
          400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"tableName\" : \"Customer\",\n    \"operation\"\
            \ : \"create\",\n    \"item\" : $input.json('$')\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customer/{email}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/customerGetReturn"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                : $input.json('$.Item.email'),\n    \"firstname\": $input.json('$.Item.firstname'),\n\
                \    \"lastname\": $input.json('$.Item.lastname'),\n    \"phone number\"\
                : $input.json('$.Item.phone_num'),\n    \"address link\": $input.json('$.Item.address.href'),\n\
                \    \"customer link\": $input.json('$.Item.self.href')\n}"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{\n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Details\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\": \"read\",\n    \"tableName\": \"\
            Customer\",\n    \"email\": \"$input.params('email')\",\n    \"request\"\
            : {\n        \"proto\": \"$input.params().header.CloudFront-Forwarded-Proto\"\
            ,\n        \"host\": \"$input.params().header.host\",\n        \"stage\"\
            : \"$context.stage\",\n        \"resPath\": \"$context.resourcePath\"\n\
            \    }\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "customerPutTest1"
        required: true
        schema:
          $ref: "#/definitions/customerPutTest1"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n$input.json('$.Item')"
          400.*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"update\",\n    \"tableName\":\"\
            Customer\",\n    \"email\":\"$input.params('email')\",\n    \"updates\"\
            :$input.json('$')\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          403.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"errorMessage\"\
                :$input.json('$.errorMessage'),\n    \"errorType\":$input.json('$.errorType')\n\
                }"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n$input.jsom('$.Item')\n"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"errorMessage\"\
                :$input.json('$.errorMessage'),\n    \"errorType\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"delete\",\n    \"tableName\":\"\
            Customer\",\n    \"email\":\"$input.params('email')\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customer/{email}/address:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/addressGetReturn"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"UUID\"\
                : $input.json('$.Item.UUID'),\n    \"street\": $input.json('$.Item.street'),\n\
                \    \"number\": $input.json('$.Item.number'),\n    \"city\": $input.json('$.Item.city'),\n\
                \    \"state\": $input.json('$.Item.state'),\n    \"zipcode\": $input.json('$.Item.zipcode')\n\
                }"
          404.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot=$input.path('$'))\n{ \n    \"Error\
                \ Message\":$input.json('$.errorMessage'),\n    \"Error Type\":$input.json('$.errorType')\n\
                }"
        requestTemplates:
          application/json: "{\n    \"operation\":\"getaddress\",\n    \"tableName\"\
            :\"Customer\",\n    \"email\":\"$input.params('email')\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:498679776130:function:Customer/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  addressPUTReturn:
    type: "object"
    properties:
      UUID:
        type: "string"
    title: "address PUT return schema"
  customerPostTest1:
    type: "object"
    required:
    - "address"
    - "email"
    - "firstname"
    - "lastname"
    - "phone_num"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      phone_num:
        type: "string"
  Empty:
    type: "object"
    title: "Empty Schema"
  addressPOST:
    type: "object"
    required:
    - "city"
    - "number"
    - "state"
    - "street"
    - "zipcode"
    properties:
      city:
        type: "string"
      street:
        type: "string"
      number:
        type: "string"
      zipcode:
        type: "string"
      state:
        type: "string"
  addressPUT:
    properties:
      city:
        type: "string"
      street:
        type: "string"
      number:
        type: "string"
      zipcode:
        type: "string"
      state:
        type: "string"
  Error:
    type: "object"
    properties:
      Error Message:
        type: "string"
      Details:
        type: "string"
    title: "Error Schema"
  addressPOSTReturn:
    type: "object"
    properties:
      UUID:
        type: "string"
    title: "address POST return schema"
  addressGetReturn:
    type: "object"
    properties:
      street:
        type: "string"
      number:
        type: "string"
      city:
        type: "string"
      zipcode:
        type: "string"
      state:
        type: "string"
      UUID:
        type: "string"
    title: "address GET return schema"
  customerGetReturn:
    type: "object"
    properties:
      email:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      phone number:
        type: "string"
      address link:
        type: "string"
      customer link:
        type: "string"
    title: "customer GET return schema"
  customerPutTest1:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      address:
        type: "string"
      phone_num:
        type: "string"
